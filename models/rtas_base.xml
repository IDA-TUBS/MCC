<xml>
<repository>

	<!-- binaries //-->
	<binary name="nic_drv" />
	<binary name="nic_bridge" />
	<binary name="timer" />
	<binary name="remote_rom_client" />
	<binary name="remote_rom_server" />

	<!-- components //-->

	<component name="remote_rom_client">
		<provides>
			<service name="ROM" ref='rom' />
		</provides>
		<requires>
			<service name="Nic" ref='nic' />
			<ram quantum="32" />
			<caps quantum="300" />
		</requires>
		<timing>
		    <on-signal from_ref="nic">
		        <task name="unpackage" wcet="100" bcet="50"/>
		        <signal to_ref="rom"/>
		    </on-signal>
		</timing>
		<defaults dynamic='true' />
	</component>

	<component name="remote_rom_server">
		<requires>
			<service name="Nic" ref='nic' />
			<service name="ROM" ref='rom' />
			<ram quantum="32" />
			<caps quantum="300" />
		</requires>
		<timing>
		    <on-signal from_ref="rom">
		        <task name="package" wcet="100" bcet="50"/>
		        <signal to_ref="nic"/>
		    </on-signal>
		    <on-signal from_ref="nic">
		        <task name="acknowledge" wcet="100" bcet="50"/>
		    </on-signal>
		</timing>
		<defaults dynamic='true' />
	</component>

	<component name="core" singleton="true">
		<provides>
			<service name="LOG" />
		</provides>
	</component>

	<component name="timer" singleton="true">
	    <function name="TIMER" />
		<provides>
			<service name="Timer" ref="client"/>
		</provides>
		<requires>
			<ram quantum="1" />
			<caps quantum="300" />
		</requires>
		<timing>
		    <!-- we only model the rpc here, i.e. clients must use <on-time> //-->
		    <on-rpc from_ref="client" method="foobar">
		        <task name="configure" wcet="100" bcet="50"/>
		    </on-rpc>
		</timing>
	</component>

	<component name="nic_drv" singleton="true">
		<function name="Network" />
		<provides>
			<service name="Nic" max_clients="1" ref="client">
				<in-traffic size="10M" interval_ms="1000" />
			</service>
		</provides>
		<requires>
			<ram quantum="16" />
			<caps quantum="300" />
		</requires>
		<timing>
		    <on-signal from_ref="client">
		        <task name="send" wcet="100" bcet="50"/>
		    </on-signal>
		    <on-interrupt>
		        <task name="recv" wcet="100" bcet="50"/>
		        <signal to_ref="client" />
		    </on-interrupt>
		</timing>
	</component>

	<component name="nic_bridge" shareable="true">
		<mux service="Nic" />
		<provides>
			<service name="Nic" ref='client' />
		</provides>
		<requires>
			<service name="Nic" ref='driver' />
			<ram quantum="32" />
			<caps quantum="300" />
		</requires>
		<timing>
		    <on-signal from_ref="driver">
		        <task name="recv" wcet="100" bcet="50"/>
		        <signal junction="dispatch" />
		    </on-signal>
		    <on-signal from_ref="client">
		        <task name="send" wcet="100" bcet="50"/>
		        <signal to_ref="driver" />
		    </on-signal>
		    <junction name="dispatch" type="DEMUX">
		        <task name="dispatch" wcet="100" bcet="50"/>
		        <signal to_ref="client" />
		    </junction>
		</timing>
	</component>

	<composite name="ROM_PROXY">
		<proxy carrier="Nic" />
		<provides>
			<service name="ROM" max_clients="1"/>
		</provides>
		<requires>
			<service name="ROM" />
			<service name="Nic" function="Network" ref="from"/>
			<service name="Nic" function="Network" ref="to"/>
		</requires>

		<pattern>
			<component name="remote_rom_client">
				<route>
					<service name="Nic"><external ref="to" /></service>
				</route>
				<expose>
					<service name="ROM" />
				</expose>
			</component>
			<component name="remote_rom_server">
				<route>
					<service name="ROM"><external /></service>
					<service name="Nic"><external ref="from" /></service>
				</route>
			</component>
		</pattern>
	</composite>

</repository>

<platform>
	<component>
		<subsystem name="zynq-static">
			<provides>
			    <ram quantum="128"/>
			    <caps quantum="1000"/>
			    <priorities min="1"   max="1"/>
			    <priorities min="128" max="128"/>
			</provides>
			<requires>
				<comm name="Network" />
			</requires>
		</subsystem>

		<subsystem name="zynq">
			<provides>
				<spec name="zynq" />
				<!--regions>
					<region id="0" reconf_time="123" />
					<region id="1" reconf_time="456" />
				</regions>
				<vdmas>
					<vdma id="0" />
					<vdma id="1" />
				</vdmas-->
			    <ram quantum="768"/>
			    <caps quantum="10000"/>
			    <smp cores='2'/>
			    <priorities min="2" max="127"/>
			</provides>
			<requires>
				<comm name="Network" />
			</requires>
			<config name="zynq.config" />
				<!--resources>
					<flipflop fit="123" />
					<bram fit="456" />
					<cmem fit="789" />
				</resources-->
		</subsystem>
		<subsystem name="FPGA">
			<provides>
				<spec name="fpga" />
			    <ram quantum="0"/>
			    <!-- we use caps as FPGA regions -->
			    <caps quantum="2"/>
			    <priorities min="0" max="0"/>
			</provides>
			<config name="zynq_fpga.config" />
		</subsystem>
	</component>
	<component>
		<subsystem name="pc-static">
			<provides>
			    <ram quantum="128"/>
			    <caps quantum="1000"/>
			    <priorities min="1"   max="1"/>
			    <priorities min="128" max="128"/>
			</provides>
			<requires>
				<comm name="Network" />
			</requires>
		</subsystem>

		<subsystem name="pc">
			<provides>
			    <spec name="pc" />
			    <ram quantum="1024"/>
			    <caps quantum="10000"/>
			    <priorities min="2" max="127"/>
			</provides>
			<requires>
				<comm name="Network" />
			</requires>
			<config name="pc.config" />
		</subsystem>
	</component>

	<comm name="Network" />
</platform>

<!-- system //-->
<system name="base">
	<child name="nic" subsystem="zynq-static">
		<function name="Network" />
	</child>
	<child name="timer" subsystem="zynq-static">
		<component name="timer" />
	</child>

	<child name="nic" subsystem="pc-static">
		<function name="Network" />
	</child>
	<child name="timer" subsystem="pc-static">
		<component name="timer" />
	</child>
</system>
</xml>
