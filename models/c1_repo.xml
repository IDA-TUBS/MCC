<xml>
<repository>

	<!-- binaries //-->
	<binary name="gpio_drv" />
	<binary name="i2c_drv" />
	<binary name="vdma_drv" />
	<binary name="pl_irq_drv" />
	<binary name="sd_card_drv" />
	<binary name="fatfs_fs" />
	<binary name="fs_rom" />
	<binary name="bitstream_loader">
		<component name="bitstream_loader_pe"/>
		<component name="bitstream_loader_or"/>
	</binary>
	<binary name="hw_accelerator">
		<component name="hw_object_recog"/>
		<component name="hw_pose_estim"/>
	</binary>
	<binary name="camera" />
	<binary name="debay">
		<component name="debay_left" />
		<component name="debay_right" />
	</binary>
	<binary name="rect">
		<component name="rect_left" />
		<component name="rect_right" />
	</binary>
	<binary name="stereo_match" />
	<binary name="disp_to_pc" />
	<binary name="pose_estimation" />
	<binary name="trigger" />
	<binary name="object_recog" />

	<!-- components //-->

	<component name="gpio_drv" singleton="true">
		<function name="GPIO" />
		<provides>
			<service name="GPIO" />
		</provides>
		<requires>
			<ram quantum="1" />
			<caps quantum="300" />
		</requires>
		<defaults>
			<config>
				<gpio addr="0x41200000"/>
			</config>
		</defaults>
	</component>

	<component name="i2c_drv" singleton="true">
		<function name="I2C" />
		<provides>
			<service name="I2C" max_clients="1" />
		</provides>
		<requires>
			<ram quantum="1" />
			<caps quantum="300" />
		</requires>
	</component>

	<component name="vdma_drv" singleton="true">
		<function name="VDMA" />
		<provides>
			<service name="VDMA" />
		</provides>
		<requires>
			<ram quantum="1" />
			<caps quantum="300" />
			<service name="Timer" function="TIMER"/>
		</requires>
		<defaults>
			<config>
				<vdma addr="0x43000000"/>
				<vdma addr="0x43010000"/>
				<vdma addr="0x43020000"/>
				<vdma addr="0x43100000"/>
				<vdma addr="0x43110000"/>
			</config>
		</defaults>
	</component>

	<component name="pl_irq_drv" singleton="true">
		<function name="PL_IRQ" />
		<provides>
			<service name="PL_IRQ" />
		</provides>
		<requires>
			<ram quantum="1" />
			<caps quantum="300" />
			<service name="Timer" function="TIMER" />
		</requires>
		<defaults>
			<config>
				<irq number="61"/>
				<irq number="62"/>
				<irq number="63"/>
				<irq number="64"/>
				<irq number="65"/>
				<irq number="66"/>
				<irq number="67"/>
				<irq number="68"/>
				<irq number="84"/>
			</config>
		</defaults>
	</component>

	<component name="sd_card_drv">
		<function name="SD_CARD"/>
		<provides>
			<service name="Block"/>
		</provides>
		<requires>
			<ram quantum="1"/>
		</requires>
	</component>

	<component name="fatfs_fs">
		<function name="FATFS_FS"/>
		<provides>
			<service name="File_system"/>
		</provides>
		<requires>
			<service name="Block"/>
			<ram quantum="1"/>
		</requires>
		<defaults>
			<config>
				<default-policy root="/" writeable="yes" />
			</config>
		</defaults>
	</component>

	<component name="fs_rom">
		<function name="FS_ROM"/>
		<provides>
			<service name="ROM" ref="rom"/>
		</provides>
		<requires>
			<service name="File_system"/>
			<ram quantum="16"/>
		</requires>
	</component>

	<component name="bitstream_loader_pe" singleton="true">
		<function name="Dpr" />
		<provides>
			<service name="Dpr" max_clients="1"/>
		</provides>
		<requires>
			<service name="Timer" function="TIMER"/>
			<service name="ROM" function="FILE_SYSTEM" ref="debayer_region_0" />
			<service name="ROM" function="FILE_SYSTEM" ref="debayer_region_1"/>
			<service name="ROM" function="FILE_SYSTEM" ref="rectify_region_1"/>
			<service name="ROM" function="FILE_SYSTEM" ref="stereomatch_region_1"/>
			<service name="ROM" function="FILE_SYSTEM" ref="disp2pc_region_0"/>
			<service name="ROM" function="FILE_SYSTEM" ref="disp2pc_region_1"/>
			<ram quantum="1" />
			<caps quantum="300" />
		</requires>
		<defaults>
			<config verbose="yes">
				<file name="config_debayer_pblock_reconf_region_0_partial_pcap.bin" size="533732" module="1" region="0"/>
				<file name="config_debayer_pblock_reconf_region_1_partial_pcap.bin" size="2039292" module="1" region="1"/>
				<file name="config_rectify_pblock_reconf_region_1_partial_pcap.bin" size="2039292" module="2" region="1"/>
				<file name="config_stereo_matching_pblock_reconf_region_1_partial_pcap.bin" size="2039292" module="3" region="1"/>
				<file name="config_disp2pc_pblock_reconf_region_0_partial_pcap.bin" size="533732" module="4" region="0"/>
				<file name="config_disp2pc_pblock_reconf_region_1_partial_pcap.bin" size="2039292" module="4" region="1"/>
			</config>
		</defaults>
	</component>

	<component name="bitstream_loader_or" singleton="true">
		<function name="Dpr_or" />
		<provides>
			<service name="Dpr" max_clients="1"/>
		</provides>
		<requires>
			<service name="Timer" function="TIMER"/>
			<service name="ROM" function="FILE_SYSTEM" ref="debayer_region_0" />
			<service name="ROM" function="FILE_SYSTEM" ref="rectify_region_1"/>
			<ram quantum="1" />
			<caps quantum="300" />
		</requires>
		<defaults>
			<config verbose="yes">
				<file name="config_debayer_pblock_reconf_region_0_partial_pcap.bin" size="533732" module="1" region="0"/>
				<file name="config_rectify_pblock_reconf_region_1_partial_pcap.bin" size="2039292" module="2" region="1"/>
			</config>
		</defaults>
	</component>

	<component name="hw_pose_estim">
		<function name="ACCEL" />
		<provides>
			<service name="ROM" />
			<service name="ACCEL" />
		</provides>
		<requires>
			<service name="VDMA" function="VDMA" />
			<service name="PL_IRQ" function="PL_IRQ" />
			<service name="GPIO" function="GPIO" />
			<service name="Dpr" />
			<service name="ROM" ref="cam_left" label="img_left" />
			<service name="ROM" ref="cam_right" label="img_right" />
			<service name="Timer" function="TIMER" />
			<ram quantum="32" />
			<caps quantum="300" />
		</requires>
		<timing>
			<!-- FIXME take task graph from composite if available //-->
			<on-signal from_ref="cam_left">
				<task wcet="100" bcet="80"/>
			</on-signal>
			<on-signal from_ref="cam_right">
				<task wcet="100" bcet="80"/>
			</on-signal>
		</timing>
	</component>

	<component name="hw_object_recog">
		<function name="ACCEL" />
		<provides>
			<service name="ROM" ref='rom' />
			<service name="ACCEL" />
		</provides>
		<requires>
			<service name="VDMA" function="VDMA" />
			<service name="PL_IRQ" function="PL_IRQ" />
			<service name="GPIO" function="GPIO" />
			<service name="Dpr" />
			<service name="ROM" ref="cam_left" label="img_left" />
			<service name="Timer" function="TIMER" />
			<ram quantum="32" />
			<caps quantum="300" />
		</requires>
		<timing>
		    <on-signal from_ref="cam_left">
		        <task name="process" wcet="100" bcet="50"/>
		        <!-- TODO timing model -->
		        <signal to_ref="rom"/>
		    </on-signal>
		    <!-- TODO on-time model? -->
		</timing>
	</component>

	<component name="camera" singleton="true">
		<function name="CAMERA" />
		<provides>
			<service name="ROM" ref='rom'/>
		</provides>
		<requires>
			<spec name="zynq" />
			<service name="I2C" function="I2C" />
			<service name="GPIO" function="GPIO" />
			<service name="VDMA" function="VDMA" />
			<service name="PL_IRQ" function="PL_IRQ" />
			<service name="ROM" function="TRIGGER" label="trigger_remote" ref='trigger' />
			<service name="Timer" function="TIMER"/>
			<ram quantum="36" />
			<caps quantum="300" />
		</requires>
		<defaults>
			<config>
				<dst_rom name_left="img_left" name_right="img_right" size="0x140000"/>
				<trigger_rom name="trigger_remote"/>
			</config>
		</defaults>
		<timing>
		    <on-signal from_ref="trigger">
		        <task name="trigger" wcet="100" bcet="50"/>
		        <!-- TODO timing model -->
		        <signal to_ref="rom"/>
		    </on-signal>
		    <!-- TODO on-time model? -->
		</timing>
	</component>

	<component name="debay_left">
		<function name="DEBAY" />
		<provides>
			<service name="ROM" />
		</provides>
		<requires>
			<service name="ROM" ref="in" label="image_bayer_left"/>
			<ram quantum="8" />
			<caps quantum="300" />
		</requires>
		<timing>
			<on-signal from_ref="in">
				<task wcet="100" bcet="80" name="task1"/>
			</on-signal>
		</timing>
		<defaults>
			<config rom="image_bayer_left" />
		</defaults>
	</component>

	<component name="debay_right">
		<function name="DEBAY" />
		<provides>
			<service name="ROM" />
		</provides>
		<requires>
			<service name="ROM" ref="in" label="image_bayer_right"/>
			<ram quantum="8" />
			<caps quantum="300" />
		</requires>
		<timing>
			<on-signal from_ref="in">
				<task wcet="100" bcet="80"/>
			</on-signal>
		</timing>
		<defaults>
			<config rom="image_bayer_right" />
		</defaults>
	</component>

	<component name="rect_left">
		<function name="RECT" />
		<provides>
			<service name="ROM" />
		</provides>
		<requires>
			<service name="ROM" ref="in" />
			<ram quantum="16" />
			<caps quantum="400" />
		</requires>
		<timing>
			<on-signal from_ref="in">
				<task wcet="100" bcet="80"/>
			</on-signal>
		</timing>
		<defaults>
			<config rom="left" />
		</defaults>
	</component>

	<component name="rect_right">
		<function name="RECT" />
		<provides>
			<service name="ROM" />
		</provides>
		<requires>
			<service name="ROM" ref="in" />
			<ram quantum="16" />
			<caps quantum="400" />
		</requires>
		<timing>
			<on-signal from_ref="in">
				<task wcet="100" bcet="80"/>
			</on-signal>
		</timing>
		<defaults>
			<config rom="right" />
		</defaults>
	</component>

	<component name="stereo_match">
		<provides>
			<service name="ROM" />
		</provides>
		<requires>
			<service name="ROM" ref="left" label="rect_left" />
			<service name="ROM" ref="right" label="rect_right" />
			<ram quantum="64" />
			<caps quantum="500" />
		</requires>
		<timing>
			<on-signal from_ref="left">
				<task wcet="100" bcet="80" name="task-left" />
				<signal junction="match" />
			</on-signal>
			<on-signal from_ref="right">
				<task wcet="100" bcet="80" name="task-right" />
				<signal junction="match" />
			</on-signal>
			<junction name="match" type="AND">
				<task wcet="100" bcet="80" name="match" />
			</junction>
		</timing>
	</component>

	<component name="disp_to_pc">
		<provides>
			<service name="ROM" label="pointcloud" />
		</provides>
		<requires>
			<service name="ROM" ref="disp" />
			<service name="ROM" ref="rect_left" />
			<ram quantum="256" />
			<caps quantum="500" />
		</requires>
		<timing>
			<on-signal from_ref="disp">
				<task wcet="100" bcet="80"/>
			</on-signal>
			<on-signal from_ref="rect_left">
				<task wcet="100" bcet="80"/>
			</on-signal>
		</timing>
	</component>

	<component name="pose_estimation">
		<requires>
			<service name="ROM" ref="in" function="POINTCLOUD" />
			<ram quantum="256" />
			<caps quantum="500" />
		</requires>
		<timing>
			<on-signal from_ref="in">
				<task wcet="100" bcet="80"/>
			</on-signal>
		</timing>
	</component>

	<component name="trigger">
		<function name="TRIGGER" />
		<provides>
			<service name="ROM" />
		</provides>
		<timing>
			<on-signal from_ref="in">
				<task wcet="100" bcet="80"/>
			</on-signal>
		</timing>
	</component>

	<component name="object_recog">
		<requires>
			<service name="ROM" ref="in" />
			<ram quantum="32" />
			<caps quantum="300" />
			<spec name="pc"/>
		</requires>
		<timing>
			<on-signal from_ref="in">
				<task wcet="100" bcet="80"/>
			</on-signal>
		</timing>
	</component>

	<!-- composites //-->
	<composite name="POINTCLOUD">
		<function name="POINTCLOUD" />
		<provides>
			<service name="ROM" ref="out">
				<out-traffic size="3600K" interval_ms="1000" />
			</service>
		</provides>
		<requires>
			<service name="ROM" function="STEREO_PREPROC_LEFT" ref="rect_left1" />
			<service name="ROM" function="STEREO_PREPROC_LEFT" ref="rect_left2" />
			<service name="ROM" function="STEREO_PREPROC_RIGHT" ref="rect_right" />
		</requires>

		<pattern>
			<component name="stereo_match">
				<route>
					<service name="ROM" ref="left"><external ref="rect_left1" /></service>
					<service name="ROM" ref="right"><external ref="rect_right" /></service>
				</route>
			</component>
			<component name="disp_to_pc">
				<route>
					<service name="ROM" ref="rect_left"><external ref="rect_left2" /></service>
					<service name="ROM" ref="disp"><child name="stereo_match"/></service>
				</route>
				<expose ref="out">
					<service name="ROM" />
				</expose>
			</component>
		</pattern>
	</composite>

	<composite name="OBJECT_PREPRO_SW">
		<function name="OBJECT_PREPRO_SW" />
		<provides>
			<service name="ROM" ref="out">
				<out-traffic size="3600K" interval_ms="1000" />
			</service>
		</provides>
		<requires>
			<service name="ROM" function="CAMERA" ref="cam_left" />
		</requires>
		<timing>
			<on-signal from_ref="cam_left">
				<task wcet="100" bcet="80"/>
			</on-signal>
		</timing>

		<pattern>
			<component name="debay_left">
				<route><service name="ROM"><external ref="cam_left"/></service></route>
			</component>
			<component name="rect_left">
				<route><service name="ROM"><child name="debay_left" /></service></route>
				<expose ref="out">
					<service name="ROM"/>
				</expose>
			</component>
		</pattern>
	</composite>

	<composite name="OBJECT_PREPRO_HW">
		<function name="OBJECT_PREPRO_HW" />
		<provides>
			<service name="ROM" ref="out">
				<out-traffic size="3600K" interval_ms="1000" />
			</service>
		</provides>
		<requires>
			<service name="ROM" function="CAMERA" ref="cam_left" />
			<service name="VDMA" function="VDMA" ref="vdma"/>
			<service name="PL_IRQ" function="PL_IRQ" ref="irq"/>
			<service name="GPIO" function="GPIO" ref="gpio"/>
			<service name="Dpr" function="Dpr_or" ref="dpr"/>
			<service name="Timer" function="TIMER" ref="timer" />
		</requires>

		<pattern>
			<component name="hw_object_recog">
				<route>
					<service name="ROM" ref="cam_left" ><external ref="cam_left"/></service>
					<service name="VDMA" ><external ref="vdma"/></service>
					<service name="PL_IRQ" ><external ref="irq"/></service>
					<service name="GPIO" ><external ref="gpio"/></service>
					<service name="Dpr" ><external ref="dpr"/></service>
					<service name="Timer" ><external ref="timer"/></service>
				</route>
				<expose ref="out">
					<service name="ROM"/>
				</expose>
				<config>
					<!-- TODO //-->
				</config>
			</component>
		</pattern>
	</composite>

	<composite name="FILE_SYSTEM">
		<function name="FILE_SYSTEM"/>
		<provides>
			<service name="ROM" />
		</provides>
		<requires>
			<service name="Block" function="SD_CARD" ref="in" />
		</requires>

		<pattern>
			<component name="fatfs_fs">
				<route>
					<service name="Block"><external ref="in" /></service>
				</route>
			</component>
			<component name="fs_rom">
				<route>
					<service name="File_system"><child name="fatfs_fs" /></service>
				</route>
				<expose><service name="ROM" ref="rom"/></expose>
			</component>
		</pattern>
	</composite>

	<composite name="STEREO_PREPROC_HW">
		<function name="STEREO_PREPROC" />
		<function name="STEREO_PREPROC_LEFT" />
		<function name="STEREO_PREPROC_RIGHT" />
		<provides>
			<service name="ROM" ref="out">
				<out-traffic size="3600K" interval_ms="1000" />
			</service>
		</provides>
		<requires>
			<service name="ROM" function="CAMERA" ref="cam_left" />
			<service name="ROM" function="CAMERA" ref="cam_right" />
			<service name="VDMA" function="VDMA" ref="vdma"/>
			<service name="PL_IRQ" function="PL_IRQ" ref="irq"/>
			<service name="GPIO" function="GPIO" ref="gpio"/>
			<service name="Dpr" function="Dpr" ref="dpr"/>
			<service name="Timer" function="TIMER" ref="timer" />
		</requires>
		<timing>
			<on-signal from_ref="preproc">
				<task wcet="100" bcet="80"/>
			</on-signal>
		</timing>

		<!--taskgraph>
			<on-signal from_ref="cam_left">
				<task name="debay_left">
					<component name="debay_left" task="task1" />
					<component name="debay_left_hw" task="foobar" />
				</task>
				<task name="rect_left">
					<component name="rect_left" task="task1" />
					<component name="rect_left_hw" task="foobar" />
				</task>
				<task name="stereo_match>
					<component name="stereo_match" task="task-left" />
				</task>
				<signal junction="match" />
			</on-signal>
			<on-signal from_ref="cam_right">
				<task name="debay_right" >
					<component name="debay_right" task="task1" />
					<component name="debay_right_hw" />
				</task>
				<task name="rect_right">
					<component name="rect_right" task="task1" />
					<component name="rect_right_hw" task="foobar" />
				</task>
				<task name="stereo_match>
					<component name="stereo_match" task="task-right" />
				</task>
				<signal junction="match" />
			</on-signal>
			<junction name="match" type="AND">
				<task>
					<component name="stereo_match" task="match" />
				</task>
				<task name="disp_to_pc" >
					<component name="disp_to_pc" task="foobar" />
				</task>
			</junction>
		</taskgraph-->

		<pattern>
			<component name="hw_pose_estim">
				<route>
					<service name="ROM" ref="cam_left" ><external ref="cam_left"/></service>
					<service name="ROM" ref="cam_right" ><external ref="cam_right"/></service>
					<service name="VDMA" ><external ref="vdma"/></service>
					<service name="PL_IRQ" ><external ref="irq"/></service>
					<service name="GPIO" ><external ref="gpio"/></service>
					<service name="Dpr" ><external ref="dpr"/></service>
					<service name="Timer" ><external ref="timer"/></service>
				</route>
				<expose ref="out">
					<service name="ROM"/>
				</expose>
				<config>
					<action type="waitfor_irq" src_name="img_left"/>
					<action type="waitfor_irq" src_name="img_right"/>
					<action type="reconfigure" region="0" algorithm="debayer"/>
					<action type="reconfigure" region="1" algorithm="rectify"/>
					<action type="task" region="1" config="left" tdest="0">
						<dst name="img_rectified_left" amount="3"/>
					</action>
					<action type="task" region="0" tdest="4">
						<src1 name="img_left" vdma="3" amount="1"/>
					</action>
					<action type="waitfor_irq" region="0"/>
					<action type="waitfor_irq" region="1"/>
					<action type="task" region="1" config="right" tdest="0">
						<dst name="img_rectified_right" amount="3"/>
					</action>
					<action type="task" region="0" tdest="4">
						<src1 name="img_right" vdma="3" amount="1"/>
					</action>
					<action type="waitfor_irq" region="0"/>
					<action type="waitfor_irq" region="1"/>
					<action type="reconfigure" region="1" algorithm="stereo_matching"/>
					<action type="task" region="1" tdest="0">
						<src1 name="img_rectified_left" vdma="3" amount="3"/>
						<src2 name="img_rectified_right" vdma="4" amount="3"/>
						<dst name="img_disparity" amount="1"/>
					</action>
					<action type="waitfor_irq" region="1"/>
					<action type="reconfigure" region="0" algorithm="disp2pc"/>
					<action type="task" region="0" tdest="0">
						<src1 name="img_disparity" vdma="3" amount="1" />
						<src2 name="img_rectified_left" vdma="4" amount="3"/>
						<dst name="img_pointcloud" amount="16"/>
					</action>
					<action type="waitfor_irq" region="0"/>
					<action type="update" dst_name="img_pointcloud"/>
					</config>
			</component>
		</pattern>
	</composite>

	<!-- TODO we may split this into a POINTCLOUD and STEREO_PREPROC_SW composite //-->
	<composite name="POINTCLOUD_SW">
		<function name="POINTCLOUD" />
		<provides>
			<service name="ROM" ref="out">
				<out-traffic size="3600K" interval_ms="1000" />
			</service>
		</provides>
		<requires>
			<service name="ROM" function="CAMERA" ref="cam_left" />
			<service name="ROM" function="CAMERA" ref="cam_right" />
		</requires>
		<timing>
			<on-signal from_ref="cam_left">
				<task wcet="100" bcet="80"/>
			</on-signal>
		</timing>

		<pattern>
			<component name="debay_left">
				<route><service name="ROM"><external ref="cam_left"/></service></route>
			</component>
			<component name="debay_right">
				<route><service name="ROM"><external ref="cam_right"/></service></route>
			</component>
			<component name="rect_left">
				<route><service name="ROM"><child name="debay_left" /></service></route>
			</component>
			<component name="rect_right">
				<route><service name="ROM"><child name="debay_right" /></service></route>
			</component>
			<component name="stereo_match">
				<route>
					<service name="ROM" ref="left"><child name="rect_left" /></service>
					<service name="ROM" ref="right"><child name="rect_right" /></service>
				</route>
			</component>
			<component name="disp_to_pc">
				<route>
					<service name="ROM" ref="rect_left"><child name="rect_left" /></service>
					<service name="ROM" ref="disp"><child name="stereo_match"/></service>
				</route>
				<expose ref="out">
					<service name="ROM" />
				</expose>
			</component>
		</pattern>
	</composite>
</repository>

</xml>
