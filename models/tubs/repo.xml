<xml>
<repository>

	<!-- binaries //-->
	<binary name="vdma_drv" />
	<binary name="bitstream_loader" />
	<binary name="hw_accelerator">
		<component name="stereo_preproc_hw"/>
		<component name="mono_preproc_hw"/>
	</binary>
	<binary name="camera" />
	<binary name="debay">
		<component name="debay_left" />
		<component name="debay_right" />
	</binary>
	<binary name="rect">
		<component name="rect_left" />
		<component name="rect_right" />
	</binary>
	<binary name="stereo_match" />
	<binary name="stereo_to_pc" />
	<binary name="disp_to_pc" />
	<binary name="pose_estimation" />
	<binary name="object_recog" />

	<!-- components //-->

	<component name="vdma_drv" singleton="true">
		<function name="VDMA" />
		<provides>
			<service name="VDMA" />
		</provides>
		<requires>
			<ram quantum="1" />
			<caps quantum="300" />
			<spec name="cpu" />
			<affinity val="1" />
		</requires>
	</component>

	<component name="bitstream_loader" singleton="true">
		<function name="Dpr" />
		<provides>
			<service name="Dpr" max_clients="1"/>
		</provides>
		<requires>
			<ram quantum="1" />
			<caps quantum="300" />
			<spec name="cpu" />
			<affinity val="1" />
		</requires>
	</component>

	<component name="stereo_preproc_hw">
		<provides>
			<service name="ROM" ref="out" />
		</provides>
		<requires>
			<service name="VDMA" function="VDMA" />
			<!--
			<service name="GPIO" function="GPIO" />
			//-->
			<service name="Dpr" />
			<service name="CAM" ref="cam_left" label="img_left" />
			<service name="CAM" ref="cam_right" label="img_right" />
			<caps quantum="1" />
			<spec name="fpga" />
		</requires>
		<timing>
			<on-signal from_ref="cam_left">
				<task name='proc_left' wcet="100" bcet="50"/>
				<signal junction='join' />
			</on-signal>
			<on-signal from_ref="cam_right">
				<task name='proc_right' wcet="100" bcet="50"/>
				<signal junction='join' />
			</on-signal>
			<junction name="join" type="AND">
				<task wcet="100" bcet="50" name="join" />
				<signal to_ref="out" />
			</junction>
		</timing>
	</component>

	<component name="mono_preproc_hw">
		<provides>
			<service name="ROM" ref="out" />
		</provides>
		<requires>
			<service name="VDMA" function="VDMA" />
			<!--
			<service name="GPIO" function="GPIO" />
			//-->
			<service name="Dpr" />
			<service name="CAM" ref="cam" label="img_left" />
			<caps quantum="1" />
			<spec name="fpga" />
		</requires>
		<timing>
			<on-signal from_ref="cam">
				<task name='proc' wcet="100" bcet="50"/>
				<signal to_ref="out" />
			</on-signal>
		</timing>
	</component>

	<component name="camera" singleton="true">
		<function name="CAMERA" />
		<provides>
			<service name="CAM" ref='cam'/>
		</provides>
		<requires>
			<spec name="zynq" />
			<service name="ROM" function='TRIGGER' ref='trigger'/>
			<service name="GPIO" function="GPIO" ref='gpio'/>
			<ram quantum="36" />
			<caps quantum="300" />
			<spec name="cpu" />
		</requires>
		<timing>
		    <on-signal from_ref="trigger">
		        <task name="shoot" wcet="100" bcet="50"/>
		        <call to_ref='gpio' method='set' />
		        <task name='wait' wcet="20000" bcet="5000" />
		        <signal to_ref="cam"/>
		    </on-signal>
		</timing>
	</component>

	<component name="debay_left">
		<function name="DEBAY" />
		<provides>
			<service name="ROM" ref="out"/>
		</provides>
		<requires>
			<service name="CAM" ref="in" label="image_bayer_left"/>
			<ram quantum="8" />
			<caps quantum="300" />
			<spec name="cpu" />
		</requires>
		<timing>
			<on-signal from_ref="in">
				<task wcet="20000" bcet="5000" name="debay_left"/>
				<signal to_ref="out" />
			</on-signal>
		</timing>
		<defaults>
			<config rom="image_bayer_left" />
		</defaults>
	</component>

	<component name="debay_right">
		<function name="DEBAY" />
		<provides>
			<service name="ROM" ref="out"/>
		</provides>
		<requires>
			<service name="CAM" ref="in" label="image_bayer_right"/>
			<ram quantum="8" />
			<caps quantum="300" />
			<spec name="cpu" />
		</requires>
		<timing>
			<on-signal from_ref="in">
				<task name='debay_right' wcet="20000" bcet="5000"/>
				<signal to_ref="out" />
			</on-signal>
		</timing>
		<defaults>
			<config rom="image_bayer_right" />
		</defaults>
	</component>

	<component name="rect_left">
		<function name="RECT" />
		<provides>
			<service name="ROM" ref="out"/>
		</provides>
		<requires>
			<service name="ROM" ref="in" />
			<ram quantum="16" />
			<caps quantum="400" />
			<spec name="cpu" />
		</requires>
		<timing>
			<on-signal from_ref="in">
				<task name='rect_left' wcet="20000" bcet="5000"/>
				<signal to_ref="out" />
			</on-signal>
		</timing>
		<defaults>
			<config rom="left" />
		</defaults>
	</component>

	<component name="rect_right">
		<function name="RECT" />
		<provides>
			<service name="ROM" ref="out" />
		</provides>
		<requires>
			<service name="ROM" ref="in" />
			<ram quantum="16" />
			<caps quantum="400" />
			<spec name="cpu" />
		</requires>
		<timing>
			<on-signal from_ref="in">
				<task name='rect_right' wcet="20000" bcet="5000"/>
				<signal to_ref="out" />
			</on-signal>
		</timing>
		<defaults>
			<config rom="right" />
		</defaults>
	</component>

	<component name="stereo_match">
		<provides>
			<service name="ROM" ref="out" />
		</provides>
		<requires>
			<service name="ROM" ref="left" label="left" />
			<service name="ROM" ref="right" label="right" />
			<ram quantum="64" />
			<caps quantum="500" />
			<spec name="cpu" />
		</requires>
		<timing>
			<on-signal from_ref="left">
				<task wcet="100" bcet="50" name="task-left" />
				<signal junction="match" />
			</on-signal>
			<on-signal from_ref="right">
				<task wcet="100" bcet="50" name="task-right" />
				<signal junction="match" />
			</on-signal>
			<junction name="match" type="AND">
				<task wcet="20000" bcet="5000" name="match" />
				<signal to_ref="out" />
			</junction>
		</timing>
	</component>

	<component name="stereo_to_pc">
		<provides>
			<service name="ROM" ref="out" />
		</provides>
		<requires>
			<service name="ROM" ref="rect" />
			<service name="ROM" ref="left" label="left" />
			<service name="ROM" ref="right" label="right" />
			<ram quantum="512" />
			<caps quantum="500" />
			<spec name="cpu" />
		</requires>
		<timing>
			<on-signal from_ref="left">
				<task wcet="1000" bcet="500" name="task-left2" />
				<signal junction="match" />
			</on-signal>
			<on-signal from_ref="right">
				<task wcet="1000" bcet="500" name="task-right2" />
				<signal junction="match" />
			</on-signal>
			<on-signal from_ref="rect">
				<task wcet="100" bcet="50" name="discard" />
				<signal junction="match" />
			</on-signal>
			<junction name="match" type="AND">
				<task wcet="20000" bcet="5000" name="proc_pc" />
				<signal to_ref="out" />
			</junction>
		</timing>
	</component>

	<component name="disp_to_pc">
		<provides>
			<service name="ROM" ref="out" label="pointcloud" />
		</provides>
		<requires>
			<service name="ROM" ref="disp" />
			<service name="ROM" ref="rect" />
			<ram quantum="256" />
			<caps quantum="500" />
			<spec name="cpu" />
		</requires>
		<timing>
			<on-signal from_ref="disp">
				<task name='proc_disp' wcet="1000" bcet="500"/>
				<signal junction='disp_to_pc' />
			</on-signal>
			<on-signal from_ref="rect">
				<task name='proc_rect' wcet="1000" bcet="500"/>
				<signal junction='disp_to_pc' />
			</on-signal>
			<junction name="disp_to_pc" type="AND">
				<task wcet="20000" bcet="5000" name="disp_to_pc" />
				<signal to_ref="out" />
			</junction>
		</timing>
	</component>

	<component name="pose_estimation">
		<function name="TRIGGER" />
		<provides>
			<service name="ROM" ref="trigger" />
		</provides>
		<requires>
			<service name="ROM" ref="in" function="POINTCLOUD" />
			<service name="Timer" ref="timer" function="TIMER" />
			<ram quantum="256" />
			<caps quantum="500" />
			<spec name='pc' />
		</requires>
		<timing>
			<on-signal from_ref="in">
				<task name='pose1' wcet="20000" bcet="5000"/>
				<task name='pose2' wcet="25000" bcet="5000"/>
			</on-signal>
			<on-time period='1000000'>
				<task name='send_trigger' wcet="100" bcet="50"/>
				<signal to_ref='trigger' />
				<task name='oneshot' wcet="100" bcet="50"/>
				<call to_ref='timer' method='oneshot' />
				<task name='ret' wcet="100" bcet="50"/>
			</on-time>
		</timing>
	</component>

	<component name="object_recog">
		<function name="TRIGGER" />
		<provides>
			<service name="ROM" ref="trigger" />
		</provides>
		<requires>
			<service name="ROM" function="MONO_PREPROC" ref="in" label="left" />
			<service name="Timer" ref="timer" function="TIMER" />
			<ram quantum="32" />
			<caps quantum="300" />
			<spec name="pc"/>
		</requires>
		<timing>
			<on-signal from_ref="in">
				<task name='obj' wcet="20000" bcet="5000"/>
			</on-signal>
			<on-time period='300000'>
				<task name='send_trigger2' wcet="100" bcet="50"/>
				<signal to_ref='trigger' />
				<task name='oneshot2' wcet="100" bcet="50"/>
				<call to_ref='timer' method='oneshot' />
				<task name='ret2' wcet="100" bcet="50"/>
			</on-time>
		</timing>
	</component>

	<!-- composites //-->
	<composite name="POINTCLOUD">
		<function name="POINTCLOUD" />
		<provides>
			<service name="ROM" ref="out" />
		</provides>
		<requires>
			<service name="ROM" function="MONO_PREPROC" ref="rect" />
			<service name="ROM" function="STEREO_PREPROC" ref="rect_left" label="left" />
			<service name="ROM" function="STEREO_PREPROC" ref="rect_right" label="right" />
			<spec name="cpu" />
		</requires>

		<pattern>
			<component name="stereo_match">
				<route>
					<service name="ROM" ref="left"><external ref="rect_left" /></service>
					<service name="ROM" ref="right"><external ref="rect_right" /></service>
				</route>
			</component>
			<component name="disp_to_pc">
				<route>
					<service name="ROM" ref="rect"><external ref="rect" /></service>
					<service name="ROM" ref="disp"><child name="stereo_match"/></service>
				</route>
				<expose ref="out">
					<service name="ROM" />
				</expose>
			</component>
		</pattern>

		<pattern>
			<component name="stereo_to_pc">
				<route>
					<service name="ROM" ref="rect"><external ref="rect" /></service>
					<service name="ROM" ref="left"><external ref="rect_left" /></service>
					<service name="ROM" ref="right"><external ref="rect_right" /></service>
				</route>
				<expose ref="out">
					<service name="ROM" />
				</expose>
			</component>
		</pattern>
	</composite>

	<composite name="MONO_PREPRO_SW">
		<function name="MONO_PREPROC" />
		<provides>
			<service name="ROM" ref="out" />
		</provides>
		<requires>
			<service name="CAM" function="CAMERA" ref="cam_left" />
			<spec name="cpu" />
		</requires>

		<pattern>
			<component name="debay_left">
				<route><service name="CAM"><external ref="cam_left"/></service></route>
			</component>
			<component name="rect_left">
				<route><service name="ROM"><child name="debay_left" /></service></route>
				<expose ref="out">
					<service name="ROM"/>
				</expose>
			</component>
		</pattern>
	</composite>

	<composite name="MONO_PREPROC_HW">
		<function name="MONO_PREPROC" />
		<provides>
			<service name="ROM" ref="out" />
		</provides>
		<requires>
			<service name="CAM" function="CAMERA" ref="cam_left" />
			<spec name='zynq' />
		</requires>

		<pattern>
			<!-- TODO try using GPIO again here //-->
			<component name="vdma_drv" />
			<component name="bitstream_loader" />
			<component name="mono_preproc_hw">
				<route>
					<service name="CAM" ref="cam" ><external ref="cam_left"/></service>
					<service name="VDMA" ><child name="vdma_drv"/></service>
					<service name="Dpr" ><child name="bitstream_loader"/></service>
				</route>
				<expose ref="out">
					<service name="ROM" ref="out"/>
				</expose>
			</component>
		</pattern>
	</composite>

	<composite name="STEREO_PREPROC_HW">
		<function name="STEREO_PREPROC" />
		<function name="MONO_PREPROC" />
		<provides>
			<service name="ROM" ref="out" />
		</provides>
		<requires>
			<service name="CAM" function="CAMERA" ref="cam_left" />
			<service name="CAM" function="CAMERA" ref="cam_right" />
			<spec name='zynq' />
		</requires>

		<pattern>
			<!-- TODO try using GPIO again here //-->
			<component name="vdma_drv" />
			<component name="bitstream_loader" />
			<component name="stereo_preproc_hw">
				<route>
					<service name="CAM" ref="cam_left" ><external ref="cam_left"/></service>
					<service name="CAM" ref="cam_right" ><external ref="cam_right"/></service>
					<service name="VDMA" ><child name="vdma_drv"/></service>
					<service name="Dpr" ><child name="bitstream_loader"/></service>
				</route>
				<expose ref="out">
					<service name="ROM" ref="out"/>
				</expose>
			</component>
		</pattern>
	</composite>

	<composite name="STEREO_PREPROC_SW">
		<function name="STEREO_PREPROC" />
		<function name="MONO_PREPROC" />
		<provides>
			<service name="ROM" ref="out_left" label="left" />
			<service name="ROM" ref="out_right" label="right" />
		</provides>
		<requires>
			<service name="CAM" function="CAMERA" ref="cam_left" />
			<service name="CAM" function="CAMERA" ref="cam_right" />
			<spec name="cpu" />
		</requires>

		<pattern>
			<component name="debay_left">
				<route><service name="CAM"><external ref="cam_left"/></service></route>
			</component>
			<component name="debay_right">
				<route><service name="CAM"><external ref="cam_right"/></service></route>
			</component>
			<component name="rect_left">
				<route><service name="ROM"><child name="debay_left" /></service></route>
				<expose ref="out_left">
					<service name="ROM"/>
				</expose>
			</component>
			<component name="rect_right">
				<route><service name="ROM"><child name="debay_right" /></service></route>
				<expose ref="out_right">
					<service name="ROM"/>
				</expose>
			</component>
		</pattern>
	</composite>

</repository>

</xml>
