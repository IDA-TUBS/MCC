<!-- test file for obstacle evasion //-->
<xml>
<repository>
	<!-- list of available binaries //-->
	<!--    system binaries  //-->
	<binary name="nic_drv"/>
	<binary name="can_drv"/>
	<binary name="nic_bridge"/>
	<binary name="remote_rom_client"/>
	<binary name="remote_rom_server"/>
	
	<!--    functional binaries  //-->
	<binary name="sensor_data_aq" />
	<!--<binary name="sensor_data_prep" />//-->
	<binary name="vehicle_contour_filter" />
	<binary name="stream_splitter" />
	<binary name="contrast_enhancement" />
	<binary name="vertical_segmentation" />
	<binary name="curb_classification" />
	<binary name="horizontal_segmentation" />
	<binary name="stixel_height_filter" />
	<binary name="free_range_filter" />
	<binary name="grid_update_image_creator">
		<component name="img_updater_bayes"/>
		<component name="img_updater_reflectance"/>
	</binary>
	<binary name="grid_cell_updater">
		<component name="cell_updater_bayes"/>
		<component name="cell_updater_reflectance"/>
	</binary>
	<binary name="grid_layer">
		<component name="grid_layer_bayes"/>
		<component name="cell_updater_reflectance"/>
	</binary>
	<binary name="tristate_fusion" />
	<binary name="drivable_area_extraction" />
	<binary name="scene_estimation" />
	<binary name="decision_taking" />
	<binary name="constraint_generation" />
	<binary name="trajectory_optimization" />
	<binary name="vehicle_control" />
	
	<!-- ############################################## //-->
	
	<!-- list of components //-->
	<!--	system components	//-->
	<component name="can_drv" singleton="true">
		<function name="CAN" />
		<provides>
			<service name="CAN" max_clients="32" />
		</provides>
	</component>
  
	<component name="nic_drv" singleton="true">
		<function name="Network" />
		<provides>
			<service name="Nic" max_clients="1" />
		</provides>
	</component>

	<component name="nic_bridge">
        <mux service="Nic" />

		<provides>
			<service name="Nic" /> <!-- max_clients defaults to an unlimited number //-->
		</provides>
		<requires>
			<service name="Nic" />
		</requires>
	</component>

	<component name="remote_rom_client">
		<!-- unclassified component (later classified in the scope of a composite component) //-->
		<provides>
			<service name="ROM" />
		</provides>

		<requires>
			<service name="Nic" />
		</requires>
	</component>

	<component name="remote_rom_server">
		<!-- unclassified component (later classified in the scope of a composite component) //-->
		<requires>
			<service name="Nic" />
			<service name="ROM" />
		</requires>
	</component>
	
	<!--	list of functional components//-->
	<component name="sensor_data_aq">
		<function name="SENSOR_DATA_AQ" />
		<provides>
			<service name="ROM" />
		</provides>
		<requires>
			<spec name="legacy_pc" />
		</requires>
	</component>
	
	<component name="stream_splitter">
		<provides>
			<service name="ROM" />
		</provides>
		<requires>
			<service name="ROM" filter="pointcloud" />
		</requires>
	</component>
	
	<component name="vehicle_contour_filter">
		<filter>
			<add tag="contour" />
		</filter>
		<provides>
			<service name="ROM"  />
		</provides>
		<requires>
			<service name="ROM" filter="pointcloud" />
		</requires>
	</component>
	
	<component name="vertical_segmentation">
	<filter>
		<add tag="vertical_seg" />
		<remove tag="contour" />
	</filter>
	<provides>
		<service name="ROM" />
	</provides>
	<requires>
		<service name="ROM" filter="pointcloud contour" />
	</requires>
	</component>
	
	<component name="curb_classification">
		<filter>
			<add tag="curbs" />
			<remove tag="vertical_seg" />
		</filter>
		<provides>
			<service name="ROM" />
		</provides>
		<requires>
			<service name="ROM" filter="pointcloud vertical_seg !contour" />
		</requires>
	</component>
	
	<component name="horizontal_segmentation">
		<filter>
			<add tag="horizontal_seg" />
			<remove tag="curbs" />
		</filter>
		<provides>
			<service name="ROM" />
		</provides>
		<requires>
			<service name="ROM" filter="pointcloud curbs !vertical_seg !contour" />
		</requires>
	</component>
	
	<component name="stixel_height_filter">
		<filter>
			<add tag="stixel" />
			<remove tag="horizontal_seg" />
		</filter>
		<provides>
			<service name="ROM" />
		</provides>
		<requires>
			<service name="ROM" filter="pointcloud horizontal_seg !curbs !vertical_seg !contour" />
		</requires>
	</component>
	
	<component name="free_range_filter">
		<filter>
			<add tag="free_range" />
			<remove tag="stixel" />
		</filter>
		<provides>
			<service name="ROM" ref="free_range" />
		</provides>
		<requires>
			<service name="ROM" filter="pointcloud stixel !horizontal_seg !curbs !vertical_seg !contour" />
		</requires>
	</component>
	
	<component name="contrast_enhancement">
		<filter>
			<add tag="contrast" />
		</filter>
		<provides>
			<service name="ROM" ref="contrast" />
		</provides>
		<requires>
			<service name="ROM" filter="pointcloud" />
		</requires>
	</component>
	
	<!-- grid layer bayes //-->	
	<component name="img_updater_bayes">
		<filter>
			<reset tag="img_bayes" />
		</filter>
		<provides>
			<service name="ROM" />
		</provides>
		<requires>
			<service name="ROM" label="pointcloud free_range" /> 
		</requires>
	</component>

	<component name="cell_updater_bayes">
		<filter>
			<reset tag="img_bayes_updated" />
		</filter>
		<provides>
			<service name="ROM" />
		</provides>
		<requires>
			<service name="ROM" label="img_bayes" />
		</requires>
	</component>
	
	<component name="grid_layer_bayes">
		<filter>
			<reset tag="grid_bayes" />
		</filter>
		<provides>
			<service name="ROM" />
		</provides>
		<requires>
			<service name="ROM" label="img_bayes_updated"/>
		</requires>
	</component>
	
	<!-- grid layer reflectance //-->
	<component name="img_updater_reflectance">
		<filter>
			<reset tag="img_reflectance" />
		</filter>
		<provides>
			<service name="ROM" />
		</provides>
		<requires>
			<service name="ROM" label="pointcloud contrast" ref="free_range" />
		</requires>
	</component>
	
	<component name="cell_updater_reflectance">
		<filter>
			<reset tag="img_reflectance_updated" />
		</filter>
		<provides>
			<service name="ROM" />
		</provides>
		<requires>
			<service name="ROM" label="img_reflectance" />
		</requires>
	</component>
	
	<component name="grid_layer_reflectance">
		<filter>
			<reset tag="grid_reflectance" />
		</filter>
		<provides>
			<service name="ROM" />
		</provides>
		<requires>
			<service name="ROM" label="img_reflectance_updated"/>
		</requires>
	</component>
	
	<component name="tristate_fusion">
		<filter>
			<reset tag="grid_fused" />
		</filter>
		<provides>
			<service name="ROM" />
		</provides>
		<requires>
			<service name="ROM" label="grid_bayes" function="GRID_LAYER_BAYES"/>
			<service name="ROM" label="grid_reflectance" function="GRID_LAYER_REFLECTANCE"/>
		</requires>
	</component>

	
	<!-- target pose generation //-->
	<component name="drivable_area_extraction">
		<filter>
			<reset tag="drivable_area" />
		</filter>
		<provides>
			<service name="ROM" />
		</provides>
		<requires>
			<service name="ROM" label="grid_fused" />
		</requires>
	</component>
	
	<component name="scene_estimation">
		<filter>
			<reset tag="drivable_area_predicted" />
		</filter>
		<provides>
			<service name="ROM" />
		</provides>
		<requires>
			<service name="ROM" label="drivable_area" />
		</requires>
	</component>
	
	<component name="decision_taking">
		<filter>
			<reset tag="target_pose" />
		</filter>
		<provides>
			<service name="ROM" />
		</provides>
		<requires>
			<service name="ROM" label="drivable_area_predicted" />
		</requires>
	</component>
	
	<!-- TRAJECTORY_GENERATION //-->
	<component name="constraint_generation">
		<filter>
			<reset tag="constraints"/>
		</filter> 
		<provides>
			<service name="ROM" />
		</provides>
		<requires>
			<service name="ROM" label="target_pose" />
		</requires>
	</component>
	
	<component name="trajectory_optimization">
		<filter>
			<reset tag="trajectory"/>
		</filter> 
		<provides>
			<service name="ROM" />
		</provides>
		<requires>
			<service name="ROM" label="constraints" />
		</requires>
	</component>
	
	<component name="vehicle_control">
		<function name="VEHICLE_CONTROL" />
		<provides>
			<service name="CAN" />
		</provides>
		<requires>
			<service name="ROM" label="trajectory"/>
		</requires>
	</component>

	<!-- list of composites //-->
	<!--	system composites	//-->
	<composite name="ROM_PROXY">
		
		<proxy carrier="Nic" />

		<provides>
			<service name="ROM" />
		</provides>
		<requires>
			<service name="ROM" />
			<service name="Nic" function="Network" ref="from" />
			<service name="Nic" function="Network" ref="to" />
		</requires>

		<pattern>
            <component name="remote_rom_client">
                <expose>
                    <service name="ROM" />
                </expose>
                <route>
                    <service name="Nic"><external ref="to" /></service>
                </route>
            </component>
            <component name="remote_rom_server">
                <route>
						 <service name="ROM"><external /></service>
                         <service name="Nic"><external ref="from" /></service>
                </route>
            </component>
		</pattern>
	</composite>
	
	
	<!--	functional composites	//-->
	<composite name="SENSOR_DATA_PREP">
		<function name="SENSOR_DATA_PREP" />
		<provides>
			<service name="ROM" ref="free_range" />
			<service name="ROM" ref="contrast" /> 
		</provides>
		<requires>
			<service name="ROM" function="SENSOR_DATA_AQ" />
		</requires>
		
		<pattern>
			<component name="vehicle_contour_filter">
				<route><service name="ROM"><external /></service></route>
			</component>
			<component name="stream_splitter">
				<route><service name="ROM"><child name="vehicle_contour_filter" /></service></route>
			</component>
			<component name="contrast_enhancement">
				<route><service name="ROM"><child name="stream_splitter" /></service></route>
				<expose ref="contrast"><service name="ROM" /></expose>	
			</component>
			<component name="vertical_segmentation">
				<route><service name="ROM"><child name="stream_splitter" /></service></route>
			</component>
			<component name="curb_classification">
				<route><service name="ROM"><child name="vertical_segmentation" /></service></route>
			</component>
			<component name="horizontal_segmentation">
				<route><service name="ROM"><child name="curb_classification" /></service></route>
			</component>
			<component name="stixel_height_filter">
				<route><service name="ROM"><child name="horizontal_segmentation" /></service></route>
			</component>
			<component name="free_range_filter">
				<route><service name="ROM"><child name="stixel_height_filter" /></service></route>
				<expose ref="free_range"><service name="ROM" /></expose>
			</component>
		</pattern>
	</composite>
	
	<composite name="GRID_LAYER_BAYES">
		<function name="GRID_LAYER_BAYES" />
		<provides>
			<service name="ROM" />
		</provides>
		<requires>
			<service name="ROM" function="SENSOR_DATA_PREP" ref="free_range" />
		</requires>
		
		<pattern>
			<component name="img_updater_bayes">
				<route><service name="ROM"><external  ref="free_range" /></service></route>
			</component>
			<component name="cell_updater_bayes">
				<route><service name="ROM"><child name="img_updater_bayes" /></service></route>
			</component>
			<component name="grid_layer_bayes">
				<route><service name="ROM"><child name="cell_updater_bayes"/></service></route>
				<expose><service name="ROM" /></expose>
			</component>
		</pattern>
	</composite>
	
	<composite name="GRID_LAYER_REFLECTANCE">
		<function name="GRID_LAYER_REFLECTANCE" />
		<provides>
			<service name="ROM" />
		</provides>
		<requires>
			<service name="ROM" function="SENSOR_DATA_PREP" ref="contrast" />
		</requires>
		
		<pattern>
			<component name="img_updater_reflectance">
				<route><service name="ROM"><external  ref="contrast" /></service></route>
			</component>
			<component name="cell_updater_reflectance">
				<route><service name="ROM"><child name="img_updater_reflectance" /></service></route>
			</component>
			<component name="grid_layer_reflectance">
				<route><service name="ROM"><child name="cell_updater_reflectance"/></service></route>
				<expose><service name="ROM" /></expose>
			</component>
		</pattern>
	</composite>
	
	<composite>
		<function name="TARGET_POSE_GENERATION" />
		<provides>
			<service name="ROM" />
		</provides>
		<requires>
			<service name="ROM" label="grid_fused" />
		</requires>
		
		<pattern>
			<component name="drivable_area_extraction">
				<route><service name="ROM"><external /></service></route>
			</component>
			<component name="scene_estimation">
				<route><service name="ROM"><child name="drivable_area_extraction" /></service></route>
			</component>
			<component name="decision_taking">
				<route><service name="ROM"><child name="scene_estimation" /></service></route>
				<expose><service name="ROM" /></expose>
			</component>
		</pattern>
	</composite>
	
	<composite>
		<function name="TRAJECTORY_GENERATION" />
		<provides>
			<service name="ROM" />
		</provides>
		<requires>
			<service name="ROM" label="target_pose" />
		</requires>
		
		<pattern>
			<component name="decision_taking">
				<route><service name="ROM"><external /></service></route>
			</component>
			<component name="trajectory_optimization">
				<route><service name="ROM"><child name="decision_taking" /></service></route>
				<expose><service name="ROM" /></expose>
			</component>
		</pattern>
	</composite>

</repository>

<platform>
    <subsystem name="legacy_pc">
        <provides>
            <spec name="legacy_pc" />
        </provides>
        <requires>
            <comm name="Network" />
        </requires>
        <config name="legacy_pc.config" />
    </subsystem>

    <subsystem name="nuc">
        <requires>
            <comm name="Network" />
        </requires>
        <config name="nuc.config" />
    </subsystem>

    <subsystem name="zynq">
        <requires>
            <comm name="Network" />
        </requires>
        <config name="zynq.config" />
    </subsystem>

    <subsystem name="dspace">
        <requires>
            <comm name="Network" />
        </requires>
        <config name="dspace.config" />
    </subsystem>

    <comm name="Network" />
</platform>

<system name="obstacle_evasion">
    <child name="SENS_DATA_AQ" subsystem="legacy_pc">
        <function name="SENSOR_DATA_AQ"/>
    </child>
    
    <child name="SENS_DATA_PREP" subsystem="legacy_pc">
        <function name="SENSOR_DATA_PREP" />
        <route>
            <service name="ROM"><child name="SENS_DATA_AQ" /></service>
        </route>
    </child>
    <child name="NIC1" subsystem="legacy_pc"><function name="Network" /></child>
	
    <child name="GRID_BAYES" subsystem="nuc">
        <function name="GRID_LAYER_BAYES"/>
        <route>
            <service name="ROM"><child name="SENS_DATA_PREP" /></service>
        </route>
    </child>
    
    <child name="GRID_REFLECTANCE" subsystem="nuc">
        <function name="GRID_LAYER_REFLECTANCE"/>
        <route>
            <service name="ROM"><child name="SENS_DATA_PREP"/></service>
        </route>
    </child>
            
    <child name="TRISTATE" subsystem="nuc">
        <component name="tristate_fusion" />
        <dependency>
            <child name="GRID_BAYES" />
            <child name="GRID_REFLECTANCE" />
        </dependency>
    </child>
            
    <child name="TARGET_POSE_GEN" subsystem="nuc">
        <function name="TARGET_POSE_GENERATION"/>
        <dependency>
            <child name="TRISTATE" />
        </dependency>
    </child>
    
    <child name="NIC2" subsystem="nuc"><function name="Network" /></child>
	
		
    <child name="TRAJ_GEN" subsystem="zynq">
        <function name="TRAJECTORY_GENERATION" />
        <route>
            <service name="ROM"><child name="TARGET_POSE_GEN" /></service>
        </route>
    </child>
    
    <child name="NIC3" subsystem="zynq"><function name="Network" /></child>
	
    <child name="VEHICLE_CTRL" subsystem="dspace">
        <function name="VEHICLE_CONTROL" />
        <route>
            <service name="ROM"><child name="TRAJ_GEN"/></service>
        </route>
    </child>
    
    <child name="NIC4" subsystem="dspace"><function name="Network" /></child>
    <child name="CAN" subsystem="dspace"><function name="CAN" /></child>
	
	
</system>

</xml>
