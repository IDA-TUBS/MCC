<xml>
<repository>

	<!--TBD>
		Q: how to expose more than 1 ROM?
		A: There should be no limitation in the number of provided or exposed services. Particularly, I recently introduced the 'ref' attribute for this case so that the provided services can be distinguished and referenced in the pattern. (see https://www.ida.ing.tu-bs.de/kanboard/?controller=TaskViewController&action=show&task_id=7&project_id=1#comment-3)
	</TBD-->

	<!-- binaries //-->
	<binary name="gpio_drv" />
	<binary name="i2c_drv" />
	<binary name="vdma_drv" />
	<binary name="pl_irq_drv" />
	<binary name="nic_drv" />
	<binary name="nic_bridge" />
	<binary name="remote_rom_client" />
	<binary name="remote_rom_server" />
	<binary name="sd_card_drv" />
	<binary name="fatfs_fs" />
	<binary name="fs_rom" />
	<binary name="bitstream_loader" />
	<binary name="hw_accelerator" />
	<binary name="camera" />
	<binary name="debay">
		<component name="debay_left" />
		<component name="debay_right" />
	</binary>
	<binary name="rect">
		<component name="rect_left" />
		<component name="rect_right" />
	</binary>
	<binary name="stereo_match" />
	<binary name="disp_to_pc" />
	<binary name="pose_estimation" />
	<binary name="trigger" />
	<binary name="object_recog" />

	<!-- components //-->

	<component name="parent" singleton="true">
		<!-- This is a dummy component that provides base system services such as Timer and LOG 
			Those services should be part of a base system in future.-->
		<function name="PARENT" />
		<provides>
			<service name="Timer" />
			<service name="LOG"  />
		</provides>
		<requires>
			<ram quantum="1" />
			<caps quantum="300" />
		</requires>
	</component>

	<component name="gpio_drv" singleton="true">
		<function name="GPIO" />
		<provides>
			<service name="GPIO" max_clients="1" />
		</provides>
		<requires>
			<ram quantum="1" />
			<caps quantum="300" />
		</requires>
		<defaults>
			<config>
				<gpio addr="0x41200000"/>
			</config>
		</defaults>
	</component>

	<component name="i2c_drv" singleton="true">
		<function name="I2C" />
		<provides>
			<service name="I2C" max_clients="1" />
		</provides>
		<requires>
			<ram quantum="1" />
			<caps quantum="300" />
		</requires>
	</component>

	<component name="vdma_drv" singleton="true">
		<function name="VDMA" />
		<provides>
			<service name="VDMA" max_clients="1" />
		</provides>
		<requires>
			<ram quantum="1" />
			<caps quantum="300" />
			<service name="Timer" />
		</requires>
		<defaults>
			<config>
				<vdma addr="0x43000000"/>
				<vdma addr="0x43010000"/>
				<vdma addr="0x43020000"/>
				<vdma addr="0x43100000"/>
				<vdma addr="0x43110000"/>
			</config>
		</defaults>
	</component>

	<component name="pl_irq_drv" singleton="true">
		<function name="PL_IRQ" />
		<provides>
			<service name="PL_IRQ" max_clients="1" />
		</provides>
		<requires>
			<ram quantum="1" />
			<caps quantum="300" />
			<service name="Timer" />
		</requires>
		<defaults>
			<config>
				<irq number="61"/>
				<irq number="62"/>
				<irq number="63"/>
				<irq number="64"/>
				<irq number="65"/>
				<irq number="66"/>
				<irq number="67"/>
				<irq number="68"/>
				<irq number="84"/>
			</config>
		</defaults>
	</component>

	<component name="nic_drv" singleton="true">
		<function name="Network" />
		<provides>
			<service name="Nic" max_clients="1">
				<in-traffic size="10M" interval_ms="1000" />
			</service>
		</provides>
		<requires>
			<ram quantum="16" />
			<caps quantum="300" />
		</requires>
	</component>

	<component name="nic_bridge">
		<mux service="Nic" />
		<provides>
			<service name="Nic" />
		</provides>
		<requires>
			<service name="Nic" />
			<ram quantum="32" />
			<caps quantum="300" />
		</requires>
	</component>

	<component name="remote_rom_client">
		<provides>
			<service name="ROM" />
		</provides>
		<requires>
			<service name="Nic" />
			<ram quantum="32" />
			<caps quantum="300" />
		</requires>
		<defaults>
			<config>
				<remote_rom binary="false" name="trigger_remote" src="192.168.0.110" dst="192.168.0.111">
				</remote_rom>
			</config>
		</defaults>
	</component>

	<component name="remote_rom_server">
		<requires>
			<service name="Nic" />
			<service name="ROM" />
			<ram quantum="32" />
			<caps quantum="300" />
		</requires>
		<defaults>
			<config>
				<remote_rom binary="true" localname="img_pointcloud" name="image_remote_pointcloud" src="192.168.0.110" dst="192.168.0.111"> </remote_rom>
			</config>
		</defaults>
	</component>

	<component name="sd_card_drv">
		<function name="SD_CARD"/>
		<provides>
			<service name="Block"/>
		</provides>
		<requires>
			<ram quantum="1"/>
		</requires>
	</component>

	<component name="fatfs_fs">
		<function name="FATFS_FS"/>
		<provides>
			<service name="File_system"/>
		</provides>
		<requires>
			<service name="Block"/>
			<ram quantum="1"/>
		</requires>
		<defaults>
			<config>
				<default-policy root="/" writeable="yes" />
			</config>
		</defaults>
	</component>

	<component name="fs_rom">
		<function name="FS_ROM"/>
		<provides>
			<service name="ROM" ref="rom"/>
		</provides>
		<requires>
			<service name="File_system"/>
			<ram quantum="16"/>
		</requires>
	</component>

	<component name="bitstream_loader" singleton="true">
		<function name="Dpr" />
		<provides>
			<service name="Dpr" max_clients="1"/>
		</provides>
		<requires>
			<service name="Timer" function="PARENT"/>
			<service name="ROM" function="FILE_SYSTEM" ref="debayer_region_0" />
			<service name="ROM" function="FILE_SYSTEM" ref="debayer_region_1"/>
			<service name="ROM" function="FILE_SYSTEM" ref="rectify_region_1"/>
			<service name="ROM" function="FILE_SYSTEM" ref="stereomatch_region_1"/>
			<service name="ROM" function="FILE_SYSTEM" ref="disp2pc_region_0"/>
			<service name="ROM" function="FILE_SYSTEM" ref="disp2pc_region_1"/>
			<ram quantum="1" />
			<caps quantum="300" />
		</requires>
		<defaults>
			<config verbose="yes">
				<file name="config_debayer_pblock_reconf_region_0_partial_pcap.bin" size="533732" module="1" region="0"/>
				<file name="config_debayer_pblock_reconf_region_1_partial_pcap.bin" size="2039292" module="1" region="1"/>
				<file name="config_rectify_pblock_reconf_region_1_partial_pcap.bin" size="2039292" module="2" region="1"/>
				<file name="config_stereo_matching_pblock_reconf_region_1_partial_pcap.bin" size="2039292" module="3" region="1"/>
				<file name="config_disp2pc_pblock_reconf_region_0_partial_pcap.bin" size="533732" module="4" region="0"/>
				<file name="config_disp2pc_pblock_reconf_region_1_partial_pcap.bin" size="2039292" module="4" region="1"/>
			</config>
		</defaults>
	</component>

	<component name="hw_accelerator">
		<function name="ACCEL" />
		<provides>
			<service name="ROM" />
			<service name="ACCEL" />
		</provides>
		<requires>
			<service name="VDMA" function="VDMA" />
			<service name="PL_IRQ" function="PL_IRQ" />
			<service name="GPIO" function="GPIO" />
			<service name="Dpr" function="Dpr" />
			<service name="ROM" ref="cam_left" />
			<service name="ROM" ref="cam_right" />
			<service name="Timer" function="PARENT"/>
			<ram quantum="32" />
			<caps quantum="300" />
		</requires>
	</component>

	<component name="camera" singleton="true">
		<function name="CAMERA" />
		<provides>
			<service name="ROM" />
		</provides>
		<requires>
			<spec name="zynq" />
			<service name="I2C" function="I2C" />
			<service name="GPIO" function="GPIO" />
			<service name="VDMA" function="VDMA" />
			<service name="PL_IRQ" function="PL_IRQ" />
			<service name="ROM" function="TRIGGER" />
			<service name="Timer" function="PARENT"/>
			<ram quantum="16" />
			<caps quantum="300" />
		</requires>
		<defaults>
			<config>
				<dst_rom name_left="img_left" name_right="img_right" size="0x140000"/>
				<trigger_rom name="trigger_remote"/>
			</config>
		</defaults>
	</component>

	<component name="debay_left">
		<function name="DEBAY" />
		<provides>
			<service name="ROM" />
		</provides>
		<requires>
			<service name="ROM" ref="in"/>
			<ram quantum="8" />
			<caps quantum="300" />
		</requires>
		<timing>
			<on-signal from_ref="in">
				<task wcet="100" bcet="80" name="task1"/>
			</on-signal>
		</timing>
		<defaults>
			<config rom="left" />
		</defaults>
	</component>

	<component name="debay_right">
		<function name="DEBAY" />
		<provides>
			<service name="ROM" />
		</provides>
		<requires>
			<service name="ROM" ref="in"/>
			<ram quantum="8" />
			<caps quantum="300" />
		</requires>
		<timing>
			<on-signal from_ref="in">
				<task wcet="100" bcet="80"/>
			</on-signal>
		</timing>
		<defaults>
			<config rom="right" />
		</defaults>
	</component>

	<component name="debay_hw">
		<function name="DEBAY" />
		<provides>
			<service name="ROM" />
		</provides>
		<requires>
			<service name="ROM" ref="in"/>
			<ram quantum="8" />
			<caps quantum="300" />
			<!--regions>
				<region id="0" />
				<region id="1" />
			</regions-->
		</requires>
		<!--hw_characteristics>
			<type name="CMEM" quantum="123456" vulnerability="0.10" cross_section="123" />
			<type name="BRAM" quantum="123456" vulnerability="0.5" cross_section="123" />
			<type name="LUT" quantum="123456" vulnerability="0.2" cross_section="123" />
		</hw_characteristics-->
		<timing>
			<on-signal from_ref="in">
				<task wcet="60" bcet="50"/>
			</on-signal>
		</timing>
		<defaults>
			<config rom="left" />
		</defaults>
	</component>

	<component name="rect_left">
		<function name="RECT" />
		<provides>
			<service name="ROM" />
		</provides>
		<requires>
			<service name="ROM" ref="in" />
			<ram quantum="16" />
			<caps quantum="400" />
		</requires>
		<timing>
			<on-signal from_ref="in">
				<task wcet="100" bcet="80"/>
			</on-signal>
		</timing>
		<defaults>
			<config rom="left" />
		</defaults>
	</component>

	<component name="rect_right">
		<function name="RECT" />
		<provides>
			<service name="ROM" />
		</provides>
		<requires>
			<service name="ROM" ref="in" />
			<ram quantum="16" />
			<caps quantum="400" />
		</requires>
		<timing>
			<on-signal from_ref="in">
				<task wcet="100" bcet="80"/>
			</on-signal>
		</timing>
		<defaults>
			<config rom="right" />
		</defaults>
	</component>

	<component name="rect_hw">
		<function name="RECT" />
		<provides>
			<service name="ROM" />
		</provides>
		<requires>
			<service name="ROM" ref="in" />
			<ram quantum="16" />
			<caps quantum="400" />
			<!--regions><region id="0" /></regions-->
		</requires>
		<!--hw_characteristics>
			<type name="CMEM" quantum="123456" vulnerability="0.10" cross_section="123" />
			<type name="BRAM" quantum="123456" vulnerability="0.5" cross_section="123" />
			<type name="LUT" quantum="123456" vulnerability="0.2" cross_section="123" />
		</hw_characteristics-->
		<timing>
			<on-signal from_ref="in">
				<task wcet="60" bcet="50"/>
			</on-signal>
		</timing>
		<defaults>
			<config rom="left" />
		</defaults>
	</component>

	<component name="stereo_match">
		<function name="STEREO_MATCH" />
		<provides>
			<service name="ROM" />
		</provides>
		<requires>
			<service name="ROM" ref="left" />
			<service name="ROM" ref="right" />
			<ram quantum="64" />
			<caps quantum="500" />
		</requires>
		<timing>
			<on-signal from_ref="left">
				<task wcet="100" bcet="80" name="task-left" />
				<signal junction="match" />
			</on-signal>
			<on-signal from_ref="right">
				<task wcet="100" bcet="80" name="task-right" />
				<signal junction="match" />
			</on-signal>
			<junction name="match" type="AND">
				<task wcet="100" bcet="80" name="match" />
			</junction>
		</timing>
	</component>

	<component name="stereo_match_hw">
		<function name="STEREO_MATCH" />
		<provides>
			<service name="ROM" />
		</provides>
		<requires>
			<service name="ROM" ref="left" />
			<service name="ROM" ref="right" />
			<ram quantum="64" />
			<caps quantum="500" />
			<!--regions><region id="0" /></regions-->
		</requires>
		<!--hw_characteristics>
			<type name="CMEM" quantum="123456" vulnerability="0.10" cross_section="123" />
			<type name="BRAM" quantum="123456" vulnerability="0.5" cross_section="123" />
			<type name="LUT" quantum="123456" vulnerability="0.2" cross_section="123" />
		</hw_characteristics-->
		<timing>
			<on-signal from_ref="left">
				<task wcet="60" bcet="50"/>
			</on-signal>
		</timing>
	</component>

	<component name="disp_to_pc">
		<function name="DISP_TO_PC" />
		<provides>
			<service name="ROM" />
		</provides>
		<requires>
			<service name="ROM" ref="disp" />
			<service name="ROM" ref="rect_left" />
			<ram quantum="256" />
			<caps quantum="500" />
		</requires>
		<timing>
			<on-signal from_ref="disp">
				<task wcet="100" bcet="80"/>
			</on-signal>
		</timing>
	</component>

	<component name="disp_to_pc_hw">
		<function name="DISP_TO_PC" />
		<provides>
			<service name="ROM" />
		</provides>
		<requires>
			<service name="ROM" ref="disp" />
			<service name="ROM" ref="rect_left" />
			<ram quantum="256" />
			<caps quantum="500" />
			<!--regions>
				<region id="0" />
				<region id="1" />
			</regions-->
			<!--hw_characteristics>
				<type name="CMEM" quantum="123456" vulnerability="0.10" cross_section="123" />
				<type name="BRAM" quantum="123456" vulnerability="0.5" cross_section="123" />
				<type name="LUT" quantum="123456" vulnerability="0.2" cross_section="123" />
			</hw_characteristics-->
		</requires>
		<timing>
			<on-signal from_ref="disp">
				<task wcet="60" bcet="40"/>
			</on-signal>
		</timing>
	</component>

	<component name="pose_estimation">
		<requires>
			<service name="ROM" ref="in" />
			<ram quantum="256" />
			<caps quantum="500" />
		</requires>
		<timing>
			<on-signal from_ref="in">
				<task wcet="100" bcet="80"/>
			</on-signal>
		</timing>
	</component>

	<component name="trigger">
		<function name="TRIGGER" />
		<provides>
			<service name="ROM" />
		</provides>
		<timing>
			<on-signal from_ref="in">
				<task wcet="100" bcet="80"/>
			</on-signal>
		</timing>
	</component>

	<component name="object_recog">
		<requires>
			<service name="ROM" ref="in" />
			<ram quantum="32" />
			<caps quantum="300" />
		</requires>
		<timing>
			<on-signal from_ref="in">
				<task wcet="100" bcet="80"/>
			</on-signal>
		</timing>
	</component>

	<!-- composites //-->
	<composite name="OBJECT_PREPRO">
		<function name="OBJECT_PREPRO" />
		<provides>
			<service name="ROM" ref="out">
				<out-traffic size="3600K" interval_ms="1000" />
			</service>
		</provides>
		<requires>
			<service name="ROM" function="CAMERA" ref="cam_left" />
		</requires>
		<timing>
			<on-signal from_ref="cam_left">
				<task wcet="100" bcet="80"/>
			</on-signal>
		</timing>

		<pattern>
			<component name="debay_left">
				<route><service name="ROM"><external ref="cam_left"/></service></route>
			</component>
			<component name="rect_left">
				<route><service name="ROM"><child name="debay_left" /></service></route>
				<expose ref="out">
					<service name="ROM"/>
				</expose>
			</component>
		</pattern>
	</composite>

	<composite name="FILE_SYSTEM">
		<function name="FILE_SYSTEM"/>
		<provides>
			<service name="ROM" ref="debayer_region_0" />
			<service name="ROM" ref="debayer_region_1" />
			<service name="ROM" ref="rectify_region_1" />
			<service name="ROM" ref="stereomatching_region_1" />
			<service name="ROM" ref="disp2pc_region_0" />
			<service name="ROM" ref="disp2pc_region_1" />
		</provides>
		<requires>
			<service name="Block" function="SD_CARD" ref="in" />
		</requires>

		<pattern>
			<component name="fatfs_fs">
				<route>
					<service name="Block"><external ref="in" /></service>
				</route>
			</component>
			<component name="fs_rom">
				<route>
					<service name="File_system"><child name="fatfs_fs" /></service>
				</route>
				<expose ref="debayer_region_0" ><service name="ROM" ref="rom"/></expose>
				<expose ref="debayer_region_1"><service name="ROM" ref="rom"/></expose>
				<expose ref="rectify_region_1"><service name="ROM" /></expose>
				<expose ref="stereomatching_region_1"><service name="ROM" /></expose>
				<expose ref="disp2pc_region_0"><service name="ROM" /></expose>
				<expose ref="disp2pc_region_1"><service name="ROM" /></expose>
			</component>
		</pattern>
	</composite>

	<composite name="POSE_ESTIMATION_HW">
		<function name="POSE_ESTIMATION_HW" />
		<provides>
			<service name="ROM" ref="out">
				<out-traffic size="3600K" interval_ms="1000" />
			</service>
		</provides>
		<requires>
			<service name="ROM" function="CAMERA" ref="cam_left" />
			<service name="ROM" function="CAMERA" ref="cam_right" />
			<service name="VDMA" function="VDMA" ref="vdma"/>
			<service name="PL_IRQ" function="PL_IRQ" ref="irq"/>
			<service name="GPIO" function="GPIO" ref="gpio"/>
			<service name="Dpr" function="Dpr" ref="dpr"/>
			<service name="Timer" function="PARENT" ref="timer" />
		</requires>
		<timing>
			<on-signal from_ref="preproc">
				<task wcet="100" bcet="80"/>
			</on-signal>
		</timing>

		<!--taskgraph>
			<on-signal from_ref="cam_left">
				<task name="debay_left">
					<component name="debay_left" task="task1" />
					<component name="debay_left_hw" task="foobar" />
				</task>
				<task name="rect_left">
					<component name="rect_left" task="task1" />
					<component name="rect_left_hw" task="foobar" />
				</task>
				<task name="stereo_match>
					<component name="stereo_match" task="task-left" />
				</task>
				<signal junction="match" />
			</on-signal>
			<on-signal from_ref="cam_right">
				<task name="debay_right" >
					<component name="debay_right" task="task1" />
					<component name="debay_right_hw" />
				</task>
				<task name="rect_right">
					<component name="rect_right" task="task1" />
					<component name="rect_right_hw" task="foobar" />
				</task>
				<task name="stereo_match>
					<component name="stereo_match" task="task-right" />
				</task>
				<signal junction="match" />
			</on-signal>
			<junction name="match" type="AND">
				<task>
					<component name="stereo_match" task="match" />
				</task>
				<task name="disp_to_pc" >
					<component name="disp_to_pc" task="foobar" />
				</task>
			</junction>
		</taskgraph-->

		<pattern>
			<component name="hw_accelerator">
				<route>
					<service name="ROM" ref="cam_left" ><external ref="cam_left"/></service>
					<service name="ROM" ref="cam_right" ><external ref="cam_right"/></service>
					<service name="VDMA" ><external ref="vdma"/></service>
					<service name="PL_IRQ" ><external ref="irq"/></service>
					<service name="GPIO" ><external ref="gpio"/></service>
					<service name="Dpr" ><external ref="dpr"/></service>
					<service name="Timer" ><external ref="timer"/></service>
				</route>
				<expose ref="out">
					<service name="ROM"/>
				</expose>
				<config>
					<action type="waitfor_irq" src_name="img_left"/>
					<action type="waitfor_irq" src_name="img_right"/>
					<action type="reconfigure" region="0" algorithm="debayer"/>
					<action type="reconfigure" region="1" algorithm="rectify"/>
					<action type="task" region="1" config="left" tdest="0">
						<dst name="img_rectified_left" amount="3"/>
					</action>
					<action type="task" region="0" tdest="4">
						<src1 name="img_left" vdma="3" amount="1"/>
					</action>
					<action type="waitfor_irq" region="0"/>
					<action type="waitfor_irq" region="1"/>
					<action type="task" region="1" config="right" tdest="0">
						<dst name="img_rectified_right" amount="3"/>
					</action>
					<action type="task" region="0" tdest="4">
						<src1 name="img_right" vdma="3" amount="1"/>
					</action>
					<action type="waitfor_irq" region="0"/>
					<action type="waitfor_irq" region="1"/>
					<action type="reconfigure" region="1" algorithm="stereo_matching"/>
					<action type="task" region="1" tdest="0">
						<src1 name="img_rectified_left" vdma="3" amount="3"/>
						<src2 name="img_rectified_right" vdma="4" amount="3"/>
						<dst name="img_disparity" amount="1"/>
					</action>
					<action type="waitfor_irq" region="1"/>
					<action type="reconfigure" region="0" algorithm="disp2pc"/>
					<action type="task" region="0" tdest="0">
						<src1 name="img_disparity" vdma="3" amount="1" />
						<src2 name="img_rectified_left" vdma="4" amount="3"/>
						<dst name="img_pointcloud" amount="16"/>
					</action>
					<action type="waitfor_irq" region="0"/>
					<action type="update" dst_name="img_pointcloud"/>
					</config>
			</component>
		</pattern>
	</composite>

	<composite name="POSE_ESTIMATION_SW">
		<function name="POSE_ESTIMATION_SW" />
		<provides>
			<service name="ROM" ref="out">
				<out-traffic size="3600K" interval_ms="1000" />
			</service>
		</provides>
		<requires>
			<service name="ROM" function="CAMERA" ref="cam_left" />
			<service name="ROM" function="CAMERA" ref="cam_right" />
		</requires>
		<timing>
			<on-signal from_ref="cam_left">
				<task wcet="100" bcet="80"/>
			</on-signal>
		</timing>

		<pattern>
			<component name="debay_left">
				<route><service name="ROM"><external ref="cam_left"/></service></route>
			</component>
			<component name="debay_right">
				<route><service name="ROM"><external ref="cam_right"/></service></route>
			</component>
			<component name="rect_left">
				<route><service name="ROM"><child name="debay_left" /></service></route>
			</component>
			<component name="rect_right">
				<route><service name="ROM"><child name="debay_right" /></service></route>
			</component>
			<component name="stereo_match">
				<route>
					<service name="ROM" ref="left"><child name="rect_left" /></service>
					<service name="ROM" ref="right"><child name="rect_right" /></service>
				</route>
			</component>
			<component name="disp_to_pc">
				<route>
					<service name="ROM" ref="rect_left"><child name="rect_left" /></service>
					<service name="ROM" ref="disp"><child name="stereo_match"/></service>
				</route>
				<expose ref="out">
					<service name="ROM" />
				</expose>
			</component>
		</pattern>
	</composite>

	<composite name="ROM_PROXY">
		<proxy carrier="Nic" />
		<provides>
			<service name="ROM" />
		</provides>
		<requires>
			<service name="ROM" />
			<service name="Nic" function="Network" ref="from"/>
			<service name="Nic" function="Network" ref="to"/>
		</requires>

		<pattern>
			<component name="remote_rom_client">
				<route>
					<service name="Nic"><external ref="to" /></service>
				</route>
				<expose>
					<service name="ROM" />
				</expose>
			</component>
			<component name="remote_rom_server">
				<route>
					<service name="ROM"><external /></service>
					<service name="Nic"><external ref="from" /></service>
				</route>
			</component>
		</pattern>
	</composite>
</repository>

<platform>
	<component>
		<subsystem name="zynq">
			<provides>
				<spec name="zynq" />
				<!--regions>
					<region id="0" reconf_time="123" />
					<region id="1" reconf_time="456" />
				</regions>
				<vdmas>
					<vdma id="0" />
					<vdma id="1" />
				</vdmas-->
			</provides>
			<requires>
				<comm name="Network" />
			</requires>
			<config name="zynq.config" />
				<!--resources>
					<flipflop fit="123" />
					<bram fit="456" />
					<cmem fit="789" />
				</resources-->
		</subsystem>

		<subsystem name="pc">
			<requires>
				<comm name="Network" />
			</requires>
			<config name="pc.config" />
		</subsystem>
	</component>

	<comm name="Network" />
</platform>

<!-- system //-->
<system name="object_recognition"> 
	<child name="CAM" subsystem="zynq">
		<function name="CAMERA" />
		<dependency>
			<child name="I2C" />
			<child name="GPIO" />
			<child name="VDMA" />
			<child name="PL_IRQ" />
			<child name="TRIGGER" />
			<child name="base_component"/>
		</dependency>
	</child>

	<child name="OBJECT_PREPRO" subsystem="zynq">
		<function name="OBJECT_PREPRO" />
		<dependency>
            <child name="CAM" />
        </dependency>
	</child>

	<child name="POSE_SW" subsystem="zynq">
		<function name="POSE_ESTIMATION_SW" />
		<dependency>
            <child name="CAM" />
        </dependency>
	</child>

	<child name="POSE_HW" subsystem="zynq">
		<function name="POSE_ESTIMATION_HW" />
		<dependency>
            <child name="CAM" />
            <child name="VDMA" />
            <child name="PL_IRQ" />
            <child name="GPIO" />
			<child name="Dpr" />
			<child name="base_component" />
        </dependency>
	</child>

	<child name="Dpr" subsystem="zynq">
		<function name="Dpr" />
		<dependency> 
			<child name="FILE_SYSTEM" />
			<child name="base_component"/>
		</dependency>
	</child>

	<child name="FILE_SYSTEM" subsystem="zynq">
		<function name="FILE_SYSTEM" />
		<dependency> 
			<child name="SD_CARD" />
		</dependency>
	</child>

	<child name="I2C" subsystem="zynq"><function name="I2C" /></child>
	<child name="GPIO" subsystem="zynq"><function name="GPIO" /></child>
	<child name="VDMA" subsystem="zynq"><function name="VDMA" /><dependency><child name="base_component"/></dependency></child>
	<child name="PL_IRQ" subsystem="zynq"><function name="PL_IRQ" /><dependency><child name="base_component"/></dependency></child>
	<child name="SD_CARD" subsystem="zynq"><function name="SD_CARD" /></child>
	<child name="NIC1" subsystem="zynq"><function name="Network" /></child>
	<child name="base_component" subsystem="zynq"><function name="PARENT" /></child>
	
	<!--child name="object_recog" >
		<component name="object_recog" />
		<route>
			<service name="ROM"><child name="OBJECT_PREPRO" /></service>
		</route>
	</child-->

	<child subsystem="pc" >
        <component name="pose_estimation" />
        <dependency>
            <child name="POSE_SW" />
        </dependency>
	</child>

	<child name="TRIGGER" subsystem="pc"><function name="TRIGGER" /></child>

	<child name="NIC2" subsystem="pc"><function name="Network" /></child>
</system>
</xml>
